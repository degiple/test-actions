name: Deploy to staging

on:
  push:
    branches: [staging]

env:
  WEB_GCR_REPOSITORY: myweb
  WEB_ECR_REPOSITORY: apokaku/web
  APP_GCR_REPOSITORY: myapp
  APP_ECR_REPOSITORY: apokaku/app
  ECS_TASK_DEFINITION_FAMILY: apokaku-daniel-web-app
  ECS_SERVICE: apokaku-daniel-service
  ECS_CLUSTER: apokaku-daniel-cluster

jobs:
  # push_web:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: Get tag version
  #       id: tag_version
  #       run: |
  #         message='${{ github.event.head_commit.message }}'
  #         list=(${message//_/ })
  #         echo ::set-output name=tag::${list[-1]}
  #     - name: Log into GitHub Container Registry
  #       run: |
  #         echo "${{ secrets.CR_PAT }}" | docker login https://ghcr.io -u ${{ github.actor }} --password-stdin
  #     - name: Pull image of the tag from GCR
  #       id: gcr
  #       env:
  #         DOCKER_BUILDKIT: 1
  #         TAG: ${{ steps.tag_version.outputs.tag }}
  #       run: |
  #         IMAGE_ID=ghcr.io/${{ github.repository }}/$WEB_GCR_REPOSITORY
  #         IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
  #         docker pull $IMAGE_ID:$TAG
  #         echo ::set-output name=image_id::${IMAGE_ID}
  #     - name: Configure AWS credentials
  #       uses: aws-actions/configure-aws-credentials@v1
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: ap-northeast-1
  #     - name: Login to Amazon ECR
  #       id: login-ecr
  #       uses: aws-actions/amazon-ecr-login@v1
  #     - name: push image to Amazon ECR
  #       env:
  #         GCR_IMAGE_ID: ${{ steps.gcr.outputs.image_id }}
  #         ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
  #         TAG: ${{ steps.tag_version.outputs.tag }}
  #       run: |
  #         docker tag $GCR_IMAGE_ID:$TAG $ECR_REGISTRY/$WEB_ECR_REPOSITORY:latest
  #         docker tag $GCR_IMAGE_ID:$TAG $ECR_REGISTRY/$WEB_ECR_REPOSITORY:$TAG
  #         docker push $ECR_REGISTRY/$WEB_ECR_REPOSITORY:latest
  #         docker push $ECR_REGISTRY/$WEB_ECR_REPOSITORY:$TAG
  # push_app:
#     name: Push app to ECR
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@v2
#       - name: Get tag version
#         id: tag_version
#         run: |
#           message='${{ github.event.head_commit.message }}'
#           list=(${message//_/ })
#           echo ::set-output name=tag::${list[-1]}
#       - name: Log into GitHub Container Registry
#         run: |
#           echo "${{ secrets.CR_PAT }}" | docker login https://ghcr.io -u ${{ github.actor }} --password-stdin
#       - name: Pull image of the tag from GCR
#         id: gcr
#         env:
#           DOCKER_BUILDKIT: 1
#           TAG: ${{ steps.tag_version.outputs.tag }}
#         run: |
#           IMAGE_ID=ghcr.io/${{ github.repository }}/$APP_GCR_REPOSITORY
#           IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
#           docker pull $IMAGE_ID:$TAG
#           echo ::set-output name=image_id::${IMAGE_ID}
#       - name: Configure AWS credentials
#         uses: aws-actions/configure-aws-credentials@v1
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           aws-region: ap-northeast-1
#       - name: Login to Amazon ECR
#         id: login-ecr
#         uses: aws-actions/amazon-ecr-login@v1
#       - name: push image to Amazon ECR
#         env:
#           GCR_IMAGE_ID: ${{ steps.gcr.outputs.image_id }}
#           ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#           TAG: ${{ steps.tag_version.outputs.tag }}
#         run: |
#           docker tag $GCR_IMAGE_ID:$TAG $ECR_REGISTRY/$APP_ECR_REPOSITORY:latest
#           docker tag $GCR_IMAGE_ID:$TAG $ECR_REGISTRY/$APP_ECR_REPOSITORY:$TAG
#           docker push $ECR_REGISTRY/$APP_ECR_REPOSITORY:latest
#           docker push $ECR_REGISTRY/$APP_ECR_REPOSITORY:$TAG
  deploy:
    # needs: [push_web, push_app]
    name: Deploy ECS
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Get tag version
        id: tag_version
        run: |
          message='${{ github.event.head_commit.message }}'
          list=(${message//_/ })
          echo ::set-output name=tag::${list[-1]}
      - name: Set args for task-definition
        id: args
        run: |
          echo ::set-output name=web::${WEB_ECR_REPOSITORY}
          echo ::set-output name=app::${APP_ECR_REPOSITORY}
          echo ::set-output name=service::${ECS_SERVICE}
          echo ::set-output name=cluster::${ECS_CLUSTER}
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-1
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Download task definition
        run: |
          aws ecs describe-task-definition \
          --task-definition $ECS_TASK_DEFINITION_FAMILY \
          --query taskDefinition \
          > task-definition.json
      - name: Render Amazon ECS task definition for web container
        id: render-web-container
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: web
          image: ${{ steps.login-ecr.outputs.registry }}/${{ steps.args.outputs.web }}:v0.35.0
      - name: Confirm task definition 1
        env:
          TD_RENDERED_WEB: ${{ steps.render-web-container.outputs.task-definition }}
        run: |
          cat $TD_RENDERED_WEB
      - name: Modify Amazon ECS task definition with app container
        id: render-app-container
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ steps.render-web-container.outputs.task-definition }}
          container-name: app
          image: ${{ steps.login-ecr.outputs.registry }}/${{ steps.args.outputs.app }}:v0.35.0
      - name: Confirm task definition 2
        env:
          TD_RENDERED_APP: ${{ steps.render-app-container.outputs.task-definition }}
        run: |
          cat $TD_RENDERED_APP
      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render-app-container.outputs.task-definition }}
          service: ${{ steps.args.outputs.service }}
          cluster: ${{ steps.args.outputs.cluster }}
          wait-for-service-stability: true
#       codedeploy-appspec: appspec.json
#       codedeploy-application: AppECS-apokaku-daniel-cluster-apokaku-daniel-service
#       codedeploy-deployment-group: DgpECS-apokaku-daniel-cluster-apokaku-daniel-service
