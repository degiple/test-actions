# This is a basic workflow to help you get started with Actions

name: version up

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [master]

env:
  IMAGE_NAME: myweb


# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  generate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2.2.0
      - name: Unshallow
        run: git fetch --prune --unshallow --tags
      - name: "Get latest tag"
        id: latest
        run: |
          TAG=$(git describe --tags $(git rev-list --tags --max-count=1))
          echo ::set-output name=tag::$TAG
      - name: "Create next tag"
        id: next
        env:
          TAG: ${{ steps.latest.outputs.tag }}
        run: |
          version=$(echo ${TAG#*v})
          list=(${version//./ })
          major=$(echo ${list[0]}) && minor=$(echo ${list[1]}) && patch=0
          next_minor=$((minor+1))
          echo ::set-output name=tag::$(echo "v${major}.${next_minor}.${patch}")
      - name: "Push next tag"
        env:
          NEXT_TAG: ${{ steps.next.outputs.tag }}
        run: |
          git tag $NEXT_TAG
          git push --tags

      - name: Build image
        run: docker build ./ --file ./web/Dockerfile --tag $IMAGE_NAME

      - name: Log into GitHub Container Registry
      # TODO: Create a PAT with `read:packages` and `write:packages` scopes and save it as an Actions secret `CR_PAT`
        run: echo "${{ secrets.CR_PAT }}" | docker login https://ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Push image to GitHub Container Registry
        run: |
          IMAGE_ID=ghcr.io/${{ github.repository_owner }}/test-actions/$IMAGE_NAME
          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
          # Use Docker `latest` tag convention
          [ "$VERSION" == "$default-branch" ] && VERSION=latest
          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION
          docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION